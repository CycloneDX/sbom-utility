/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package cmd

import (
	"encoding/csv"
	"fmt"
	"io"
	"reflect"
	"sort"
	"strings"
	"text/tabwriter"

	"github.com/CycloneDX/sbom-utility/log"
	"github.com/CycloneDX/sbom-utility/schema"
	"github.com/CycloneDX/sbom-utility/utils"
	"github.com/jwangsadinata/go-multimap/slicemultimap"
	"github.com/spf13/cobra"
)

const (
	SUBCOMMAND_VULNERABILITY_LIST = "list"
)

var VALID_SUBCOMMANDS_VULNERABILITY = []string{SUBCOMMAND_VULNERABILITY_LIST}

var VULNERABILITY_LIST_TITLES = []string{
	"id",
	"bom-ref",
	"source.url",
	"source.name",
	"created",
	"published",
	"updated",
	"rejected",
	"description",
}
var VALID_VULNERABILITY_WHERE_FILTER_KEYS = []string{}

// Flags. Reuse query flag values where possible
const (
	FLAG_VULNERABILITY_WHERE      = FLAG_QUERY_WHERE
	FLAG_VULNERABILITY_WHERE_HELP = "comma-separated list of key=<regex> used to filter result set"
)

// Command help formatting
const (
	FLAG_VULNERABILITY_OUTPUT_FORMAT_HELP = "format vulnerability output"
)

var VULNERABILITY_LIST_SUPPORTED_FORMATS = MSG_SUPPORTED_OUTPUT_FORMATS_HELP +
	strings.Join([]string{FORMAT_TEXT, FORMAT_CSV, FORMAT_MARKDOWN, FORMAT_JSON}, ", ")

// Vuln. command informational messages
const (
	MSG_OUTPUT_NO_VULNERABILITIES_FOUND = "[WARN] no matching vulnerabilities found for query"
)

// TODO make configurable via flag
const VULNERABILITY_TRUNCATE_TEXT_LENGTH = 512

// filter keys
const (
	VULNERABILITY_FILTER_KEY_ID          = "id"
	VULNERABILITY_FILTER_KEY_BOMREF      = "bom-ref"
	VULNERABILITY_FILTER_KEY_SOURCE_NAME = "source.name"
	VULNERABILITY_FILTER_KEY_SOURCE_URL  = "source.url"
	VULNERABILITY_FILTER_KEY_CREATED     = "created"
	VULNERABILITY_FILTER_KEY_PUBLISHED   = "published"
	VULNERABILITY_FILTER_KEY_UPDATED     = "updated"
	VULNERABILITY_FILTER_KEY_REJECTED    = "rejected"
	VULNERABILITY_FILTER_KEY_DESC        = "description"
)

var VALID_VULN_FILTER_KEYS = []string{
	VULNERABILITY_FILTER_KEY_ID,
	VULNERABILITY_FILTER_KEY_BOMREF,
	VULNERABILITY_FILTER_KEY_SOURCE_NAME,
	VULNERABILITY_FILTER_KEY_SOURCE_URL,
	VULNERABILITY_FILTER_KEY_CREATED,
	VULNERABILITY_FILTER_KEY_PUBLISHED,
	VULNERABILITY_FILTER_KEY_UPDATED,
	VULNERABILITY_FILTER_KEY_REJECTED,
	VULNERABILITY_FILTER_KEY_DESC,
}

// TODO: do we need to strip `-` from `bom-ref` for where filter?
type VulnerabilityInfo struct {
	Id            string                        `json:"id"`
	BomRef        string                        `json:"bom-ref"`
	Created       string                        `json:"created"`
	Published     string                        `json:"published"`
	Updated       string                        `json:"updated"`
	Rejected      string                        `json:"rejected"`
	Description   string                        `json:"description"`
	Source        schema.CDXVulnerabilitySource `json:"source"`
	Vulnerability schema.CDXVulnerability
}

// Holds vulnerability info.
var vulnerabilityMap = slicemultimap.New()

func ClearGlobalVulnerabilityData() {
	vulnerabilityMap.Clear()
}

func NewCommandVulnerability() *cobra.Command {
	var command = new(cobra.Command)
	command.Use = CMD_USAGE_VULNERABILITY_LIST
	command.Short = "Report on vulnerabilities found in SBOM input file"
	command.Long = "Report on vulnerabilities found in SBOM input file"
	command.Flags().StringVarP(&utils.GlobalFlags.OutputFormat, FLAG_FILE_OUTPUT_FORMAT, "", FORMAT_TEXT,
		FLAG_VULNERABILITY_OUTPUT_FORMAT_HELP+VULNERABILITY_LIST_SUPPORTED_FORMATS)
	command.Flags().StringP(FLAG_VULNERABILITY_WHERE, "", "", FLAG_VULNERABILITY_WHERE_HELP)
	command.RunE = vulnerabilityCmdImpl
	command.ValidArgs = VALID_SUBCOMMANDS_VULNERABILITY
	command.PreRunE = func(cmd *cobra.Command, args []string) (err error) {
		// the vuln. command requires at least 1 valid subcommand (argument)
		getLogger().Tracef("args: %v\n", args)
		if len(args) == 0 {
			return getLogger().Errorf("Missing required argument(s).")
		} else if len(args) > 1 {
			return getLogger().Errorf("Too many arguments provided: %v", args)
		}

		// Make sure subcommand is known
		if !preRunTestForSubcommand(command, VALID_SUBCOMMANDS_VULNERABILITY, args[0]) {
			return getLogger().Errorf("Subcommand provided is not valid: `%v`", args[0])
		}

		// Test for required flags (parameters)
		err = preRunTestForInputFile(cmd, args)

		return
	}
	return command
}

func retrieveVulnWhereFilters(whereValues string) (whereFilters []WhereFilter, err error) {
	var whereExpressions []string

	if whereValues != "" {
		whereExpressions = strings.Split(whereValues, QUERY_WHERE_EXPRESSION_SEP)

		var filter *WhereFilter
		for _, clause := range whereExpressions {

			filter = parseWhereFilter(clause)

			if filter == nil {
				err = NewQueryWhereClauseError(nil, clause)
				return
			}

			whereFilters = append(whereFilters, *filter)
		}
	}
	return
}

func vulnerabilityCmdImpl(cmd *cobra.Command, args []string) (err error) {
	getLogger().Enter(args)
	defer getLogger().Exit()

	// Create output writer
	outputFile, writer, err := createOutputFile(utils.GlobalFlags.OutputFile)
	getLogger().Tracef("outputFile: `%v`; writer: `%v`", outputFile, writer)

	// use function closure to assure consistent error output based upon error type
	defer func() {
		// always close the output file
		if outputFile != nil {
			outputFile.Close()
			getLogger().Infof("Closed output file: `%s`", utils.GlobalFlags.OutputFile)
		}
	}()

	// Process flag: --where
	whereValues, errGet := cmd.Flags().GetString(FLAG_VULNERABILITY_WHERE)

	if errGet != nil {
		err = getLogger().Errorf("failed to read flag `%s` value", FLAG_VULNERABILITY_WHERE)
		return
	}

	var whereFilters []WhereFilter
	whereFilters, err = retrieveVulnWhereFilters(whereValues)

	if err != nil {
		return
	}

	err = ListVulnerabilities(writer, utils.GlobalFlags.OutputFormat, whereFilters)

	return
}

func processVulnerabilityListResults(err error) {
	if err != nil {
		// No special processing at this time
		getLogger().Error(err)
	}
}

// NOTE: vulnerability type data has already been validated
func ListVulnerabilities(output io.Writer, format string, whereFilters []WhereFilter) (err error) {
	getLogger().Enter()
	defer getLogger().Exit()

	// use function closure to assure consistent error output based upon error type
	defer func() {
		if err != nil {
			processVulnerabilityListResults(err)
		}
	}()

	// Note: returns error if either file load or unmarshal to JSON map fails
	var document *schema.Sbom
	document, err = LoadInputSbomFileAndDetectSchema()

	if err != nil {
		return
	}

	// Hash all licenses within input file
	getLogger().Infof("Scanning document for vulnerabilities...")
	err = loadDocumentVulnerabilities(document, whereFilters)

	if err != nil {
		return
	}

	getLogger().Infof("Outputting listing (`%s` format)...", format)
	switch format {
	case FORMAT_TEXT:
		DisplayVulnListText(output)
	case FORMAT_CSV:
		err = DisplayVulnListCSV(output)
	case FORMAT_MARKDOWN:
		err = DisplayVulnListMarkdown(output)
	case FORMAT_JSON:
		DisplayVulnListJson(output)
	default:
		// Default to Text output for anything else (set as flag default)
		getLogger().Warningf("Listing not supported for `%s` format; defaulting to `%s` format...",
			format, FORMAT_JSON)
		DisplayVulnListText(output)
	}

	return
}

func loadDocumentVulnerabilities(document *schema.Sbom, whereFilters []WhereFilter) (err error) {
	getLogger().Enter()
	defer getLogger().Exit(err)

	// At this time, fail SPDX format SBOMs as "unsupported" (for "any" format)
	if !document.FormatInfo.IsCycloneDx() {
		err = schema.NewUnsupportedFormatForCommandError(
			document.FormatInfo.CanonicalName,
			document.GetFilename(),
			CMD_LICENSE, FORMAT_ANY)
		return
	}

	// Clear out any old (global)hashmap data (NOTE: 'go test' needs this)
	ClearGlobalVulnerabilityData()

	// Before looking for license data, fully unmarshal the SBOM
	// into named structures
	if err = document.UnmarshalCDXSbom(); err != nil {
		return
	}

	// Hash all components found in the (root).components[] (+ "nested" components)
	if vulnerabilities := document.GetCdxVulnerabilities(); len(vulnerabilities) > 0 {
		if err = hashVulnerabilities(vulnerabilities, whereFilters); err != nil {
			return
		}
	}

	return
}

func hashVulnerabilities(vulnerabilities []schema.CDXVulnerability, whereFilters []WhereFilter) (err error) {
	getLogger().Enter()
	defer getLogger().Exit(err)

	for _, cdxVulnerability := range vulnerabilities {
		_, err = hashVulnerability(cdxVulnerability, whereFilters)
		if err != nil {
			return
		}
	}
	return
}

// Hash a CDX Component and recursively those of any "nested" components
// TODO we should WARN if version is not a valid semver (e.g., examples/cyclonedx/BOM/laravel-7.12.0/bom.1.3.json)
func hashVulnerability(cdxVulnerability schema.CDXVulnerability, whereFilters []WhereFilter) (vi *VulnerabilityInfo, err error) {
	getLogger().Enter()
	defer getLogger().Exit(err)
	var vulnInfo VulnerabilityInfo
	vi = &vulnInfo

	if reflect.DeepEqual(cdxVulnerability, schema.CDXVulnerability{}) {
		getLogger().Errorf("invalid vulnerability info: missing or empty : %v ", cdxVulnerability)
		return
	}

	if cdxVulnerability.Id == "" {
		getLogger().Errorf("vulnerability missing required value `id` : %v ", cdxVulnerability)
	}

	if cdxVulnerability.Created == "" {
		getLogger().Warningf("vulnerability named `%s` missing `created` date", cdxVulnerability.Created)
	}

	// hash any component w/o a license using special key name
	vulnInfo.Vulnerability = cdxVulnerability
	vulnInfo.BomRef = cdxVulnerability.BomRef
	vulnInfo.Id = cdxVulnerability.Id
	vulnInfo.Source = cdxVulnerability.Source
	vulnInfo.Description = cdxVulnerability.Description
	vulnInfo.Created = cdxVulnerability.Created
	vulnInfo.Published = cdxVulnerability.Published
	vulnInfo.Updated = cdxVulnerability.Updated
	vulnInfo.Rejected = cdxVulnerability.Rejected

	var match bool = true
	if len(whereFilters) > 0 {
		mapVulnInfo, _ := utils.ConvertStructToMap(vulnInfo)
		match, _ = whereFilterMatch(mapVulnInfo, whereFilters)
	}

	if match {
		vulnerabilityMap.Put(vulnInfo.Id, vulnInfo)

		getLogger().Tracef("Put: %s (`%s`), `%s`)",
			vulnInfo.Id,
			vulnInfo.Description,
			vulnInfo.BomRef)
	}

	return
}

// NOTE: This list is NOT de-duplicated
// TODO: Add a --no-title flag to skip title output
func DisplayVulnListText(output io.Writer) {
	getLogger().Enter()
	defer getLogger().Exit()

	// initialize tabwriter
	w := new(tabwriter.Writer)
	defer w.Flush()

	// min-width, tab-width, padding, pad-char, flags
	w.Init(output, 8, 2, 2, ' ', 0)

	// create title row and underline row from slices of optional and compulsory titles
	titles, underlines := createTitleRows(VULNERABILITY_LIST_TITLES, nil)

	// Add tabs between column titles for the tabWRiter
	fmt.Fprintf(w, "%s\n", strings.Join(titles, "\t"))
	fmt.Fprintf(w, "%s\n", strings.Join(underlines, "\t"))

	// Display a warning "missing" in the actual output and return (short-circuit)
	entries := vulnerabilityMap.Entries()

	// Emit no license warning into output
	if len(entries) == 0 {
		fmt.Fprintf(w, "%s\n", MSG_OUTPUT_NO_VULNERABILITIES_FOUND)
		return
	}

	// Sort by Id, Created date
	sort.Slice(entries, func(i, j int) bool {
		vuln1 := (entries[i].Value).(VulnerabilityInfo)
		vuln2 := (entries[j].Value).(VulnerabilityInfo)
		if vuln1.Id != vuln2.Id {
			return vuln1.Id < vuln2.Id
		}

		return vuln1.Created < vuln2.Created
	})

	var vulnInfo VulnerabilityInfo

	for _, entry := range entries {
		value := entry.Value
		vulnInfo = value.(VulnerabilityInfo)
		// CSV interprets line feeds as new cells, fix by enclosing in double quotes
		var description = ""
		if vulnInfo.Description != "" {
			description = strings.ReplaceAll(vulnInfo.Description, "\n", " ")
			// TODO: make "truncate" length configurable (via flag or config file)
			if len(description) > VULNERABILITY_TRUNCATE_TEXT_LENGTH {
				description = description[:VULNERABILITY_TRUNCATE_TEXT_LENGTH]
			}
		}

		// Format line and write to output
		fmt.Fprintf(w, "%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n",
			vulnInfo.Id,
			vulnInfo.BomRef,
			vulnInfo.Source.Name,
			vulnInfo.Source.Url,
			vulnInfo.Created,
			vulnInfo.Published,
			vulnInfo.Updated,
			vulnInfo.Rejected,
			description,
		)
	}
}

// TODO: Add a --no-title flag to skip title output
func DisplayVulnListCSV(output io.Writer) (err error) {
	getLogger().Enter()
	defer getLogger().Exit()

	// initialize writer and prepare the list of entries (i.e., the "rows")
	w := csv.NewWriter(output)
	defer w.Flush()

	if err = w.Write(VULNERABILITY_LIST_TITLES); err != nil {
		return getLogger().Errorf("error writing to output (%v): %s", VULNERABILITY_LIST_TITLES, err)
	}

	// Display a warning "missing" in the actual output and return (short-circuit)
	entries := vulnerabilityMap.Entries()

	// Emit no vuln. found warning into output
	if len(entries) == 0 {
		currentRow := []string{MSG_OUTPUT_NO_VULNERABILITIES_FOUND}
		if err = w.Write(currentRow); err != nil {
			// unable to emit an error message into output stream
			return getLogger().Errorf("error writing to output (%v): %s", currentRow, err)
		}
		return fmt.Errorf(currentRow[0])
	}

	// Sort by Id, Created date
	sort.Slice(entries, func(i, j int) bool {
		vuln1 := (entries[i].Value).(VulnerabilityInfo)
		vuln2 := (entries[j].Value).(VulnerabilityInfo)
		if vuln1.Id != vuln2.Id {
			return vuln1.Id < vuln2.Id
		}

		return vuln1.Created < vuln2.Created
	})

	var vulnInfo VulnerabilityInfo
	var line []string

	for _, entry := range entries {
		value := entry.Value
		vulnInfo = value.(VulnerabilityInfo)
		// CSV interprets line feeds as new cells, fix by enclosing in double quotes
		description := "\"" + vulnInfo.Description + "\""
		line = nil
		line = append(line,
			vulnInfo.Id,
			vulnInfo.BomRef,
			vulnInfo.Source.Name,
			vulnInfo.Source.Url,
			vulnInfo.Created,
			vulnInfo.Published,
			vulnInfo.Updated,
			vulnInfo.Rejected,
			description,
		)

		if err = w.Write(line); err != nil {
			getLogger().Errorf("csv.Write: %w", err)
		}
	}

	return
}

// TODO: Add a --no-title flag to skip title output
func DisplayVulnListMarkdown(output io.Writer) (err error) {
	getLogger().Enter()
	defer getLogger().Exit()

	// create title row
	titles, _ := createTitleRows(VULNERABILITY_LIST_TITLES, nil)
	titleRow := createMarkdownRow(titles)
	fmt.Fprintf(output, "%s\n", titleRow)

	alignments := createMarkdownColumnAlignment(titles)
	alignmentRow := createMarkdownRow(alignments)
	fmt.Fprintf(output, "%s\n", alignmentRow)

	// Display a warning "missing" in the actual output and return (short-circuit)
	entries := vulnerabilityMap.Entries()

	// Emit no vuln. found warning into output
	if len(entries) == 0 {
		fmt.Fprintf(output, "%s\n", MSG_OUTPUT_NO_VULNERABILITIES_FOUND)
		return fmt.Errorf(MSG_OUTPUT_NO_VULNERABILITIES_FOUND)
	}

	// Sort by Id, Created date
	sort.Slice(entries, func(i, j int) bool {
		vuln1 := (entries[i].Value).(VulnerabilityInfo)
		vuln2 := (entries[j].Value).(VulnerabilityInfo)
		if vuln1.Id != vuln2.Id {
			return vuln1.Id < vuln2.Id
		}

		return vuln1.Created < vuln2.Created
	})

	var vulnInfo VulnerabilityInfo
	var line []string
	var lineRow string

	for _, entry := range entries {
		value := entry.Value
		vulnInfo = value.(VulnerabilityInfo)
		// Markdown does not interpret line feeds, replace with break tag (i.e., <br>).
		description := strings.Replace(vulnInfo.Description, "\n", "<br>", -1)
		// reset current line
		line = nil
		line = append(line,
			vulnInfo.Id,
			vulnInfo.BomRef,
			vulnInfo.Source.Name,
			vulnInfo.Source.Url,
			vulnInfo.Created,
			vulnInfo.Published,
			vulnInfo.Updated,
			vulnInfo.Rejected,
			description,
		)

		lineRow = createMarkdownRow(line)
		fmt.Fprintf(output, "%s\n", lineRow)
	}

	return
}

// Output filtered list of Vulns. as JSON
func DisplayVulnListJson(output io.Writer) {
	getLogger().Enter()
	defer getLogger().Exit()

	var vulnInfo VulnerabilityInfo
	var vulnList []schema.CDXVulnerability

	for _, key := range vulnerabilityMap.KeySet() {
		arrVulnInfo, _ := vulnerabilityMap.Get(key)

		for _, iInfo := range arrVulnInfo {
			vulnInfo = iInfo.(VulnerabilityInfo)
			vulnList = append(vulnList, vulnInfo.Vulnerability)
		}
	}
	json, _ := log.FormatInterfaceAsJson(vulnList)

	// Note: JSON data files MUST ends in a newline s as this is a POSIX standard
	fmt.Fprintf(output, "%s\n", json)
}
